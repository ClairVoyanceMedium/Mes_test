<!-- Tchat IA adapt√© pour le site Victory -->
<div id="chat-container" role="complementary" aria-label="Assistant spirituel IA">
    <div id="chat-bubble">
        <button id="chat-toggle" aria-expanded="false" aria-label="Ouvrir le chat IA" title="Ouvrir le chat IA">üí¨</button>
        <button id="voice-toggle" aria-label="Activer/D√©sactiver l'assistant vocal" title="Activer/D√©sactiver l'assistant vocal">üé§</button>
    </div>
    <div id="chat-box" role="region" aria-label="Fen√™tre de chat IA">
        <div id="chat-messages" aria-live="polite"></div>
        <form id="chat-form" aria-label="Formulaire de saisie du chat IA">
            <input type="text" id="chat-input" placeholder="Posez votre question..." aria-label="Tapez votre message ici" autocomplete="off">
            <button type="submit" id="chat-send" aria-label="Envoyer votre message">‚û§</button>
        </form>
    </div>
</div>

<style nonce="xai-ultra2025">
    #chat-container {
        position: fixed;
        display: flex;
        flex-direction: column;
        z-index: 999999;
        font-family: 'Arial', sans-serif;
        transition: transform 0.3s ease;
        bottom: 20px;
        right: 20px;
    }

    #chat-bubble {
        display: flex;
        justify-content: flex-end;
        cursor: move;
    }

    #chat-toggle {
        width: 60px;
        height: 60px;
        background: linear-gradient(145deg, #FF69B4, #FFB6C1);
        color: #fff;
        border: none;
        border-radius: 50%;
        box-shadow: 0 4px 12px rgba(255, 105, 180, 0.7);
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s, background 0.2s;
        outline: none;
    }

    #chat-toggle:hover {
        transform: scale(1.1);
        background: linear-gradient(145deg, #FFB6C1, #FF69B4);
    }

    #voice-toggle {
        width: 40px;
        height: 40px;
        background: linear-gradient(145deg, #87CEEB, #5F9EA0);
        color: #fff;
        border: none;
        border-radius: 50%;
        box-shadow: 0 4px 12px rgba(135, 206, 235, 0.7);
        font-size: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 10px;
        transition: transform 0.2s;
        outline: none;
    }

    #voice-toggle:hover {
        transform: scale(1.1);
    }

    #voice-toggle.disabled {
        background: #666;
        box-shadow: 0 4px 12px rgba(102, 102, 102, 0.7);
        cursor: not-allowed;
    }

    #chat-box {
        display: none;
        flex-direction: column;
        background: #1a1a1a;
        border: 2px solid #FF69B4;
        border-radius: 15px;
        margin-top: 10px;
        box-shadow: 0 0 15px rgba(255, 105, 180, 0.5);
        width: 320px;
        max-height: 450px;
        transition: all 0.3s ease;
    }

    #chat-box.visible {
        display: flex;
    }

    #chat-messages {
        flex: 1;
        padding: 1rem;
        overflow-y: auto;
        color: #fff;
        scrollbar-width: thin;
        scrollbar-color: #FF69B4 #333;
    }

    #chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    #chat-messages::-webkit-scrollbar-thumb {
        background: #FF69B4;
        border-radius: 3px;
    }

    #chat-messages::-webkit-scrollbar-track {
        background: #333;
    }

    #chat-messages p {
        margin-bottom: 0.8rem;
        line-height: 1.5;
        opacity: 0;
        animation: fadeIn 0.5s forwards;
    }

    @keyframes fadeIn {
        to { opacity: 1; }
    }

    .bot-message {
        background: rgba(255, 255, 255, 0.1);
        color: #fff;
        padding: 0.6rem;
        border-radius: 8px;
        max-width: 85%;
        border: 1px solid #FF69B4;
        box-shadow: 0 0 8px rgba(255, 105, 180, 0.3);
        display: inline-block;
    }

    .user-message {
        background: rgba(135, 206, 235, 0.2);
        color: #FFD700;
        padding: 0.6rem;
        border-radius: 8px;
        max-width: 85%;
        text-align: right;
        border: 1px solid #87CEEB;
        box-shadow: 0 0 8px rgba(135, 206, 235, 0.3);
        display: inline-block;
        margin-left: auto;
    }

    #chat-form {
        display: flex;
        border-top: 1px solid #333;
        padding: 0.5rem;
        background: #222;
    }

    #chat-input {
        flex: 1;
        padding: 0.6rem;
        border: none;
        outline: none;
        background: #fff;
        color: #333;
        border-radius: 5px 0 0 5px;
        font-size: 0.9rem;
    }

    #chat-input:focus {
        box-shadow: 0 0 5px #FF69B4;
    }

    #chat-send {
        background: #FF69B4;
        border: none;
        padding: 0.6rem 1rem;
        color: #fff;
        font-weight: bold;
        border-radius: 0 5px 5px 0;
        cursor: pointer;
        transition: background 0.2s;
    }

    #chat-send:hover {
        background: #FF1493;
    }

    @media (max-width: 480px) {
        #chat-container {
            width: 90%;
            bottom: 10px;
            right: 10px;
        }

        #chat-box {
            width: 100%;
            max-height: 350px;
        }
    }
</style>

<script nonce="xai-ultra2025">
    // Fonction de tracking int√©gr√©e √† GA4
    function trackClick(label, category = 'Chat', value = null) {
        console.log(`Tracking: Label=${label}, Category=${category}, Value=${value}`);
        if (typeof gtag === 'function') {
            gtag('event', label, { 'event_category': category, 'value': value });
        }
    }

    // Traductions et messages adapt√©s au th√®me du site
    const translations = {
        greeting: "Bienvenue dans l'univers Victory ! Je suis votre guide spirituel et physique, ici pour vous aider √† retrouver vitalit√©, minceur et s√©r√©nit√© gr√¢ce aux solutions Victory. Comment puis-je vous accompagner aujourd'hui ?",
        thanks: "Avec plaisir, je suis l√† pour vous guider !",
        goodbye: "√Ä bient√¥t pour continuer votre chemin vers la victoire int√©rieure et ext√©rieure avec Victory !",
        notUnderstood: "Je n'ai pas bien saisi votre demande. Pourriez-vous reformuler ou pr√©ciser votre question ?",
        notUnderstoodAfter: "Il semble que nous ayons du mal √† nous comprendre. Peut-√™tre est-ce le moment de d√©couvrir nos <a href='#programme-personnalise'>programmes personnalis√©s Victory</a> ou nos <a href='#minceur'>g√©lules minceur</a> pour un bien-√™tre total. Consultez notre site pour plus d'options !",
        grave: "Votre situation semble s√©rieuse. Agissez d√®s maintenant avec nos solutions Victory pour retrouver √©quilibre et √©nergie. D√©couvrez nos programmes sur le site !",
        agree: "Parfait, comment puis-je vous aider davantage ?"
    };

    // Base de connaissances adapt√©e au site Victory
    const knowledgeBase = [
        {
            question: "Fatigue | √âpuisement | Lassitude | Faiblesse | Baisse d'√©nergie",
            fullAnswer: "Votre fatigue peut √™tre li√©e √† un d√©s√©quilibre √©nerg√©tique ou physique. Les <a href='#minceur'>g√©lules Victory Minceur</a> et notre <a href='#programme-personnalise'>programme personnalis√©</a> peuvent revitaliser votre corps et votre esprit gr√¢ce √† une approche naturelle. Posologie recommand√©e : 2 g√©lules par jour √† chaque repas (6 g√©lules/jour) pendant 3 mois. Avantages : √©nergie retrouv√©e et bien-√™tre global."
        },
        {
            question: "Poids | Kilos | Surpoids | Minceur | Perte de poids | Silhouette",
            fullAnswer: "Vous souhaitez affiner votre silhouette ? Nos <a href='#minceur'>g√©lules Victory Minceur</a> favorisent une perte de poids naturelle et rapide. Associez-les √† notre <a href='#programme-personnalise'>programme personnalis√©</a> pour des r√©sultats optimaux. Posologie : 2 g√©lules par jour √† chaque repas (6 g√©lules/jour) pendant 3 √† 4 mois. Avantages : silhouette affin√©e et confiance retrouv√©e."
        },
        {
            question: "Stress | Anxi√©t√© | Tension | Nervosit√© | √âquilibre",
            fullAnswer: "Le stress peut perturber votre bien-√™tre. Le <a href='#programme-personnalise'>programme Victory</a> combine des techniques spirituelles et physiques pour apaiser votre esprit. Compl√©tez avec les g√©lules Victory pour un effet global. Avantages : s√©r√©nit√© et √©quilibre int√©rieur."
        }
    ];

    // Pr√©paration de la base de connaissances
    function removeAccents(str) {
        return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    function levenshteinDistance(a, b) {
        const matrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));
        for (let i = 0; i <= a.length; i++) matrix[0][i] = i;
        for (let j = 0; j <= b.length; j++) matrix[j][0] = j;
        for (let j = 1; j <= b.length; j++) {
            for (let i = 1; i <= a.length; i++) {
                const indicator = a[i - 1] === b[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i] + 1,
                    matrix[j - 1][i - 1] + indicator
                );
            }
        }
        return matrix[b.length][a.length];
    }

    function phoneticNormalize(str) {
        return removeAccents(str)
            .replace(/ph/g, "f")
            .replace(/k/g, "c")
            .replace(/qu/g, "k")
            .replace(/ss/g, "s")
            .replace(/√©e/g, "e")
            .replace(/ai/g, "e");
    }

    const processedKnowledgeBase = knowledgeBase.map(item => ({
        question: item.question.toLowerCase().split("|").map(word => phoneticNormalize(removeAccents(word.trim()))).filter(word => word.length > 0),
        fullAnswer: item.fullAnswer
    }));

    let nonUnderstoodCount = 0;
    let conversationHistory = [];

    function cleanInput(input) {
        return input.toLowerCase().replace(/[^\w\s]/g, "").split(/\s+/).map(word => phoneticNormalize(removeAccents(word))).filter(word => word.length > 0);
    }

    function findBestMatch(userInput) {
        const userWords = cleanInput(userInput);
        let bestMatch = null, maxScore = 0;

        processedKnowledgeBase.forEach(item => {
            let score = 0;
            userWords.forEach(userWord => {
                item.question.forEach(kbWord => {
                    const distance = levenshteinDistance(userWord, kbWord);
                    const similarity = 1 - distance / Math.max(userWord.length, kbWord.length);
                    if (similarity >= 0.6) {
                        score += similarity;
                    }
                });
            });
            if (score > maxScore) {
                maxScore = score;
                bestMatch = item;
            }
        });

        return maxScore > 0 ? bestMatch : null;
    }

    // Gestion des r√©ponses
    function getResponse(userMsg) {
        const lowerMsg = userMsg.toLowerCase().trim();
        conversationHistory.push(lowerMsg);

        const goodbyeTriggers = ["au revoir", "aurevoir", "√† bient√¥t", "bonne journ√©e", "salut", "bye"];
        if (goodbyeTriggers.some(phrase => lowerMsg === phrase || lowerMsg.startsWith(phrase))) {
            nonUnderstoodCount = 0;
            trackClick("Goodbye", "Interaction", 0);
            return translations.goodbye;
        } else if (lowerMsg === "contact" || lowerMsg.startsWith("contact")) {
            nonUnderstoodCount = 0;
            trackClick("ContactRequest", "Interaction", 0);
            return "Contactez-nous via <a href='mailto:contact@victory.com'>contact@victory.com</a> ou consultez notre <a href='#contact'>page contact</a> pour un accompagnement personnalis√©. Nos experts Victory vous r√©pondront rapidement !";
        } else if (lowerMsg === "bonjour") {
            nonUnderstoodCount = 0;
            trackClick("Greeting", "Interaction", 0);
            return translations.greeting;
        } else if (["merci", "je vous remercie", "c'est gentil", "merci beaucoup"].includes(lowerMsg)) {
            nonUnderstoodCount = 0;
            trackClick("Thanks", "Interaction", 0);
            return translations.thanks;
        } else if (["c'est grave", "grave", "c'est s√©rieux"].includes(lowerMsg)) {
            nonUnderstoodCount = 0;
            trackClick("Serious", "Interaction", 0);
            return translations.grave;
        } else if (["d'accord", "ok", "ouais"].includes(lowerMsg)) {
            nonUnderstoodCount = 0;
            trackClick("Agree", "Interaction", 0);
            return translations.agree;
        } else {
            const matchedItem = findBestMatch(userMsg);
            if (matchedItem) {
                nonUnderstoodCount = 0;
                trackClick("ResponseGiven", "Interaction", 0);
                return matchedItem.fullAnswer;
            } else {
                nonUnderstoodCount++;
                trackClick("NotUnderstood", "Interaction", nonUnderstoodCount);
                if (nonUnderstoodCount < 3) return translations.notUnderstood;
                nonUnderstoodCount = 0;
                return translations.notUnderstoodAfter;
            }
        }
    }

    // Collecte du contenu du site
    const siteContent = [];
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('h1, h2, h3, p, li').forEach(element => {
            const text = element.textContent.trim().toLowerCase();
            if (text) siteContent.push({ text: cleanInput(text), raw: element.textContent });
        });
    });

    function getResponseFromSite(userMsg, callback) {
        const matchedItem = findBestMatch(userMsg);
        if (matchedItem) {
            callback(matchedItem.fullAnswer);
        } else {
            const userWords = cleanInput(userMsg);
            let bestMatch = null, maxScore = 0;

            siteContent.forEach(item => {
                let score = 0;
                userWords.forEach(userWord => {
                    item.text.forEach(siteWord => {
                        const distance = levenshteinDistance(userWord, siteWord);
                        const similarity = 1 - distance / Math.max(userWord.length, siteWord.length);
                        if (similarity >= 0.6) {
                            score += similarity;
                        }
                    });
                });
                if (score > maxScore) {
                    maxScore = score;
                    bestMatch = item.raw;
                }
            });

            if (maxScore > 0 && bestMatch) {
                callback(bestMatch);
            } else {
                callback(getResponse(userMsg));
            }
        }
    }

    // Gestion de l'affichage des messages
    function simulateTyping(callback) {
        const typingMessage = document.createElement("p");
        typingMessage.className = "bot-message";
        typingMessage.textContent = "...";
        chatMessages.appendChild(typingMessage);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        setTimeout(() => {
            chatMessages.removeChild(typingMessage);
            callback();
        }, conversationHistory.length > 2 ? 1000 : 800);
    }

    function addMessage(txt, cls) {
        const p = document.createElement("p");
        p.className = cls;
        p.innerHTML = txt; // Utilisation de innerHTML pour les liens
        chatMessages.appendChild(p);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        if (cls === "bot-message" && voiceEnabled) speak(txt);
    }

    // Gestion du d√©placement
    let isDragging = false, currentX = 0, currentY = 0, initialX, initialY;
    const dragHandle = document.getElementById("chat-bubble");
    const chatContainer = document.getElementById("chat-container");
    const chatBox = document.getElementById("chat-box");
    const chatMessages = document.getElementById("chat-messages");

    dragHandle.addEventListener("mousedown", startDragging);
    dragHandle.addEventListener("touchstart", startDragging, { passive: false });
    document.addEventListener("mousemove", drag);
    document.addEventListener("mouseup", stopDragging);
    document.addEventListener("touchmove", drag, { passive: false });
    document.addEventListener("touchend", stopDragging);

    function startDragging(e) {
        isDragging = true;
        if (e.type === "mousedown") {
            initialX = e.clientX - currentX;
            initialY = e.clientY - currentY;
        } else if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - currentX;
            initialY = e.touches[0].clientY - currentY;
        }
    }

    function drag(e) {
        if (!isDragging) return;
        e.preventDefault();
        let newX = e.type === "mousemove" ? e.clientX - initialX : e.touches[0].clientX - initialX;
        let newY = e.type === "mousemove" ? e.clientY - initialY : e.touches[0].clientY - initialY;
        const rect = chatContainer.getBoundingClientRect();
        const maxX = window.innerWidth - rect.width;
        const maxY = window.innerHeight - rect.height;
        currentX = Math.max(0, Math.min(newX, maxX));
        currentY = Math.max(0, Math.min(newY, maxY));
        chatContainer.style.left = `${currentX}px`;
        chatContainer.style.top = `${currentY}px`;
    }

    function stopDragging() {
        isDragging = false;
    }

    window.addEventListener('load', () => {
        const rect = chatContainer.getBoundingClientRect();
        currentX = window.innerWidth - rect.width - 20;
        currentY = window.innerHeight - rect.height - 20;
        chatContainer.style.left = `${currentX}px`;
        chatContainer.style.top = `${currentY}px`;
    });

    function adjustChatContainerPosition() {
        const rect = chatContainer.getBoundingClientRect();
        const maxX = window.innerWidth - rect.width;
        const maxY = window.innerHeight - rect.height;
        currentX = Math.min(currentX, maxX);
        currentX = Math.max(0, currentX);
        currentY = Math.min(currentY, maxY);
        currentY = Math.max(0, currentY);
        chatContainer.style.left = `${currentX}px`;
        chatContainer.style.top = `${currentY}px`;
    }

    window.addEventListener('resize', adjustChatContainerPosition);

    // Gestion du chat
    const chatToggle = document.getElementById("chat-toggle");
    const chatForm = document.getElementById("chat-form");
    const chatInput = document.getElementById("chat-input");
    let firstOpen = true;

    chatToggle.addEventListener("click", () => {
        const isHidden = !chatBox.classList.contains("visible");
        if (isHidden) {
            chatBox.classList.add("visible");
            chatToggle.setAttribute("aria-expanded", "true");
            trackClick("ChatOpen", "Interaction", 0);
            if (!chatMessages.children.length) addMessage(translations.greeting, "bot-message");
            adjustChatContainerPosition();
            setTimeout(() => chatInput.focus(), 300);
            if (firstOpen && speechRecognitionSupported && recognition) {
                recognition.start();
                firstOpen = false;
            }
        } else {
            chatBox.classList.remove("visible");
            chatToggle.setAttribute("aria-expanded", "false");
            trackClick("ChatClose", "Interaction", 0);
            adjustChatContainerPosition();
        }
    });

    chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userMsg = chatInput.value.trim();
        if (!userMsg) return;
        addMessage(userMsg, "user-message");
        trackClick("ChatMessage", "Interaction", 0);
        chatInput.value = "";
        simulateTyping(() => {
            getResponseFromSite(userMsg, (answer) => {
                addMessage(answer, "bot-message");
            });
        });
    });

    // Gestion de l'assistant vocal
    let voiceEnabled = true;

    function speak(text) {
        if (!voiceEnabled || !("speechSynthesis" in window)) return;
        const utterance = new SpeechSynthesisUtterance(text.replace(/<[^>]+>/g, '')); // Supprime les balises HTML
        utterance.lang = "fr-FR";
        utterance.pitch = 1;
        utterance.rate = 1;
        const voices = window.speechSynthesis.getVoices();
        if (voices.length > 0) {
            const frenchVoice = voices.find(v => v.lang.includes("fr"));
            if (frenchVoice) utterance.voice = frenchVoice;
        }
        window.speechSynthesis.speak(utterance);
        trackClick("VoiceOutput", "Interaction", 0);
    }

    const voiceToggle = document.getElementById("voice-toggle");
    voiceToggle.addEventListener("click", () => {
        voiceEnabled = !voiceEnabled;
        voiceToggle.classList.toggle("disabled", !voiceEnabled);
        trackClick(voiceEnabled ? "VoiceEnabled" : "VoiceDisabled", "Interaction", 0);
    });

    let speechRecognitionSupported = "SpeechRecognition" in window || "webkitSpeechRecognition" in window;
    let recognition = null;

    if (speechRecognitionSupported) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        recognition.lang = "fr-FR";
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            addMessage(transcript, "user-message");
            trackClick("VoiceInput", "Interaction", 0);
            simulateTyping(() => {
                getResponseFromSite(transcript, (answer) => {
                    addMessage(answer, "bot-message");
                });
            });
        };
        recognition.onend = () => trackClick("VoiceStop", "Interaction", 0);
        recognition.onerror = (event) => trackClick("VoiceError", "Interaction", event.error);
    }

    if (!speechRecognitionSupported) voiceToggle.style.display = "none";
</script>
